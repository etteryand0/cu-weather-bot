import logging

import aiohttp
import asyncio
from aiogram import F
from aiogram.types import Message, ReplyKeyboardRemove

from weather_bot.api import (
    get_location_key_by_city,
    parse_error_code,
    get_forecast,
    parse_weather_conditions,
)
from weather_bot.context import Context
from weather_bot.filters import DialogueStateFilter
from weather_bot.weather import router
from weather_bot.weather.keyboards import forecast_days_kb
from weather_bot.weather.context import (
    DialogueState,
    save_end_city,
    save_start_city,
    save_pitstop_cities,
)


@router.message(
    F.text, DialogueStateFilter([DialogueState.START_CITY, DialogueState.END_CITY])
)
async def msg_start_end_city(message: Message, ctx: Context):
    """
    –î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è location_key –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
    –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ location_key. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
    —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    error_message = None
    try:
        location_key, city_name = await get_location_key_by_city(message.text)
    except (ConnectionError, TimeoutError) as e:
        logging.error(e)
        error_message = "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
    except aiohttp.ClientResponseError as e:
        logging.error(e)
        error_message = parse_error_code(e.status)

    if error_message is not None:
        await message.answer(error_message)
        return

    if location_key is None:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥. üòï –í–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    dialogue = ctx.get_dialogue(message.from_user.id)
    if dialogue.state == DialogueState.START_CITY:
        await save_start_city(message, dialogue, location_key, city_name)
        return

    await save_end_city(message, dialogue, location_key, city_name)


@router.message(F.text, DialogueStateFilter(DialogueState.PITSTOP_CITIES))
async def msg_pitstop_cities(message: Message, ctx: Context):
    """
    –î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è location_key
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ location_key –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.
    –í –∫–æ—Ü–Ω–µ –ø—Ä–æ—Å–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã.
    """
    dialogue = ctx.get_dialogue(message.from_user.id)

    if message.text == "–ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫":
        markup = forecast_days_kb()
        dialogue.set_state(DialogueState.FORECAST_DAYS)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: 1, 5 –∏–ª–∏ 10 –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä!",
            reply_markup=markup,
        )
        return

    pitstop_cities = list(
        filter(
            lambda city: len(city) > 3,
            [city.strip() for city in message.text.split(",")],
        )
    )

    async with aiohttp.ClientSession() as session:
        coroutines = [
            get_location_key_by_city(city, session=session) for city in pitstop_cities
        ]

        error_message = None
        try:
            results = await asyncio.gather(*coroutines)
        except (ConnectionError, TimeoutError) as e:
            logging.error(e)
            error_message = "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
        except aiohttp.ClientResponseError as e:
            logging.error(e)
            error_message = parse_error_code(e.status)

        if error_message is not None:
            await message.answer(error_message)
            return

    missing_cities = []
    for i, data in enumerate(results):
        if data[0] is None:
            missing_cities.append(pitstop_cities[i])

    if len(missing_cities) == 1:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ {missing_cities[0]}. üòï –í–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!"
        )
        return
    elif len(missing_cities) > 1:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥–∞ {', '.join(missing_cities)}. üòï –í–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!"
        )
        return

    await save_pitstop_cities(message, dialogue, results)


@router.message(
    F.text.in_({"1 –¥–µ–Ω—å", "5 –¥–Ω–µ–π"}),
    DialogueStateFilter(DialogueState.FORECAST_DAYS),
)
async def msg_forecast_days(message: Message, ctx: Context):
    """
    –î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã.
    –ü–æ–ª—É—á–∏–≤ –ø—Ä–æ–≥–Ω–æ–∑—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ -
    1 –≥–æ—Ä–æ–¥ = 1 —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    dialogue = ctx.get_dialogue(message.from_user.id)
    days_to_forecast = 1
    if message.text == "5 –¥–Ω–µ–π":
        days_to_forecast = 5

    location_keys = (
        []
        if dialogue.data.get("pitstop_cities") is None
        else [key for (key, _) in dialogue.data["pitstop_cities"]]
    )
    location_keys.insert(0, dialogue.data["start_city"]["key"])
    location_keys.append(dialogue.data["end_city"]["key"])

    async with aiohttp.ClientSession() as session:
        coroutines = [
            get_forecast(key, days_to_forecast, session=session)
            for key in location_keys
        ]

        error_message = None
        try:
            city_forecasts = await asyncio.gather(*coroutines)
        except (ConnectionError, TimeoutError) as e:
            logging.error(e)
            error_message = "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
        except aiohttp.ClientResponseError as e:
            logging.error(e)
            error_message = parse_error_code(e.status)

        if error_message is not None:
            await message.answer(error_message)
            return

    city_names = (
        []
        if dialogue.data.get("pitstop_cities") is None
        else [name for (_, name) in dialogue.data["pitstop_cities"]]
    )
    city_names.insert(0, dialogue.data["start_city"]["name"])
    city_names.append(dialogue.data["end_city"]["name"])

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞",
        reply_markup=ReplyKeyboardRemove(),
    )

    for i, forecast in enumerate(city_forecasts):
        msg = f"–ì–æ—Ä–æ–¥: {city_names[i]}"
        for day, daily_forecast in enumerate(forecast["DailyForecasts"], start=1):
            data = parse_weather_conditions(daily_forecast)
            msg += f"\n–î–µ–Ω—å {day}, {data["date"]}:"
            msg += f"""
üåû –î–Ω–µ–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["day_temperature"]}¬∞C
üåô –ù–æ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["night_temperature"]}¬∞C
üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data["wind_speed"]} –∫–º/—á
üåßÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {data["precipitation_probability"]}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data["humidity"]}%\n"""

        await message.answer(msg)

    ctx.end_dialogue(message.from_user.id)
